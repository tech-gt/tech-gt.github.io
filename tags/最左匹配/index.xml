<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>最左匹配 on Glad You Came</title><link>https://tech-gt.github.io/tags/%E6%9C%80%E5%B7%A6%E5%8C%B9%E9%85%8D/</link><description>Recent content in 最左匹配 on Glad You Came</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 12 Aug 2023 10:00:00 +0800</lastBuildDate><atom:link href="https://tech-gt.github.io/tags/%E6%9C%80%E5%B7%A6%E5%8C%B9%E9%85%8D/index.xml" rel="self" type="application/rss+xml"/><item><title>MySQL索引一定要遵循最左匹配原则吗？</title><link>https://tech-gt.github.io/p/mysql%E7%B4%A2%E5%BC%95%E4%B8%80%E5%AE%9A%E8%A6%81%E9%81%B5%E5%BE%AA%E6%9C%80%E5%B7%A6%E5%8C%B9%E9%85%8D%E5%8E%9F%E5%88%99%E5%90%97/</link><pubDate>Sat, 12 Aug 2023 10:00:00 +0800</pubDate><guid>https://tech-gt.github.io/p/mysql%E7%B4%A2%E5%BC%95%E4%B8%80%E5%AE%9A%E8%A6%81%E9%81%B5%E5%BE%AA%E6%9C%80%E5%B7%A6%E5%8C%B9%E9%85%8D%E5%8E%9F%E5%88%99%E5%90%97/</guid><description>&lt;blockquote>
&lt;p>“最左匹配原则”是MySQL联合索引的经典说法，但它真的绝对吗？实际开发中有哪些容易被忽略的细节？本文结合实际案例，带你深入理解MySQL索引的最左匹配原则，并关注MySQL 8的新特性——Index Skip Scan。&lt;/p>&lt;/blockquote>
&lt;h2 id="什么是最左匹配原则">什么是最左匹配原则？
&lt;/h2>&lt;p>假设有如下联合索引：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">index&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">C&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>所谓“最左匹配原则”，指的是：&lt;strong>查询条件必须从索引的最左前缀开始连续匹配，索引才能被有效利用&lt;/strong>。比如：&lt;/p>
&lt;ul>
&lt;li>&lt;code>where A=1&lt;/code> 可以用到索引&lt;/li>
&lt;li>&lt;code>where A=1 and B=2&lt;/code> 可以用到索引&lt;/li>
&lt;li>&lt;code>where A=1 and B=2 and C=3&lt;/code> 可以用到索引&lt;/li>
&lt;li>但 &lt;code>where B=2 and C=3&lt;/code> 通常&lt;strong>不能&lt;/strong>用到索引&lt;/li>
&lt;/ul>
&lt;h2 id="常见误区最左匹配不是必须">常见误区：最左匹配不是“必须”！
&lt;/h2>&lt;p>网上流行的说法是“必须最左”，但实际情况要复杂得多。来看下面的例子：&lt;/p>
&lt;h3 id="误区一跳过最左字段就一定不能用索引">误区一：跳过最左字段就一定不能用索引？
&lt;/h3>&lt;p>假设有如下SQL：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">student&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;GT&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">and&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">C&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;男&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>很多人会说：因为没有A，所以不满足最左匹配，&lt;strong>不能用索引&lt;/strong>。但实际上，MySQL的优化器有时可以“跳跃”使用索引，尤其是在&lt;strong>某些字段被等值查询&lt;/strong>且索引统计信息允许的情况下。&lt;/p>
&lt;h3 id="例外情况索引下推与条件重写">例外情况：索引下推与条件重写
&lt;/h3>&lt;p>如果你的查询条件中，虽然没有A，但B和C的选择性很高，MySQL可能会选择用索引扫描（Index Condition Pushdown, ICP），但通常效率不如从最左字段开始。&lt;/p>
&lt;p>更常见的做法是&lt;strong>重写SQL&lt;/strong>，让索引能被利用。例如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">student&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">and&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;GT&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">and&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">C&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;男&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">or&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">and&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;GT&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">and&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">C&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;男&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">or&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">and&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;GT&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">and&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">C&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;男&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样，虽然没有直接写A=？，但通过“拆分”条件，依然可以让MySQL用到索引。&lt;/p>
&lt;h2 id="mysql-8-新特性index-skip-scan-打破最左匹配原则">MySQL 8 新特性：Index Skip Scan 打破最左匹配原则
&lt;/h2>&lt;p>MySQL 8.0 引入了 &lt;strong>Index Skip Scan（索引跳跃扫描）&lt;/strong>，它让“最左匹配原则”不再是绝对的。&lt;/p>
&lt;h3 id="index-skip-scan-原理">Index Skip Scan 原理
&lt;/h3>&lt;p>当你有联合索引 &lt;code>index(A, B, C)&lt;/code>，但查询条件没有包含最左的A字段时，MySQL 8 可以自动遍历A的所有可能值，对每个A值分别用B、C做索引查找，相当于自动帮你做了“条件拆分”。&lt;/p>
&lt;p>&lt;strong>举例：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">student&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;GT&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">and&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">C&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;男&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在MySQL 8.0之前，这种写法通常不会用到索引。但开启 Index Skip Scan 后，MySQL 会自动遍历A的所有取值，分别查找B和C。&lt;/p>
&lt;h3 id="适用场景">适用场景
&lt;/h3>&lt;ul>
&lt;li>联合索引的最左字段基数（distinct值）较少时效果较好（如A只有1、2、3）&lt;/li>
&lt;li>查询条件跳过了最左字段，但后续字段有高选择性&lt;/li>
&lt;li>适合数据量不是特别大的表，或最左字段枚举值有限的场景&lt;/li>
&lt;/ul>
&lt;h3 id="注意事项">注意事项
&lt;/h3>&lt;ul>
&lt;li>Index Skip Scan 并不总是最优，尤其是最左字段基数很大时，遍历代价高，可能还不如全表扫描&lt;/li>
&lt;li>是否启用可通过 &lt;code>optimizer_switch='index_skip_scan=on'&lt;/code> 控制&lt;/li>
&lt;li>实际是否用到，可以通过 &lt;code>EXPLAIN&lt;/code> 查看执行计划，type 字段会显示 &lt;code>index_skip_scan&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="explain-示例">EXPLAIN 示例
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">EXPLAIN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">student&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;GT&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AND&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">C&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;男&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>输出示例：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>id&lt;/th>
&lt;th>select_type&lt;/th>
&lt;th>table&lt;/th>
&lt;th>type&lt;/th>
&lt;th>key&lt;/th>
&lt;th>key_len&lt;/th>
&lt;th>ref&lt;/th>
&lt;th>rows&lt;/th>
&lt;th>Extra&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>SIMPLE&lt;/td>
&lt;td>student&lt;/td>
&lt;td>index_skip_scan&lt;/td>
&lt;td>index_a_b_c&lt;/td>
&lt;td>&amp;hellip;&lt;/td>
&lt;td>NULL&lt;/td>
&lt;td>&amp;hellip;&lt;/td>
&lt;td>Using where&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>可以看到 type 字段为 &lt;code>index_skip_scan&lt;/code>，说明 MySQL 自动使用了索引跳跃扫描。&lt;/p>
&lt;h2 id="实际案例分析">实际案例分析
&lt;/h2>&lt;p>假设有如下表结构：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>字段&lt;/th>
&lt;th>含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>A&lt;/td>
&lt;td>年级&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>B&lt;/td>
&lt;td>学生名&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>C&lt;/td>
&lt;td>性别&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>联合索引：&lt;code>index(A, B, C)&lt;/code>&lt;/p>
&lt;h3 id="查询1">查询1
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">student&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;GT&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">and&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">c&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;男&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>MySQL 8 之前&lt;/strong>：不满足最左匹配，不能用索引。&lt;/p>
&lt;p>&lt;strong>MySQL 8 及以后&lt;/strong>：可能会用到 index_skip_scan。&lt;/p>
&lt;h3 id="查询2">查询2
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">student&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">and&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;GT&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">and&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">c&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;男&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">or&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">and&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;GT&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">and&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">c&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;男&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">or&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">and&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;GT&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">and&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">c&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;男&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>优化后&lt;/strong>：通过枚举A的所有可能值，满足了最左匹配，索引可以被利用。&lt;/p>
&lt;h2 id="总结与建议">总结与建议
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>最左匹配原则是MySQL索引的基础，但在MySQL 8以后已不是绝对规则&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>Index Skip Scan&lt;/strong> 让跳过最左字段也有机会用到索引，但要关注最左字段基数和实际执行计划。&lt;/li>
&lt;li>如果查询条件中跳过了最左字段，建议用 &lt;code>EXPLAIN&lt;/code> 检查是否用到了 index_skip_scan。&lt;/li>
&lt;li>实际开发中，优先让查询条件覆盖索引的最左字段，或通过IN/OR等方式补齐。&lt;/li>
&lt;li>使用&lt;code>EXPLAIN&lt;/code>分析SQL执行计划，判断索引是否被正确利用。&lt;/li>
&lt;/ul></description></item></channel></rss>